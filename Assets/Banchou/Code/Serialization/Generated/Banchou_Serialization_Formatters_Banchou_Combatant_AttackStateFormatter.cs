// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace Banchou.Serialization.Formatters.Banchou.Combatant
{
    using global::System.Buffers;
    using global::MessagePack;

    public sealed class AttackStateFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Banchou.Combatant.AttackState>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Banchou.Combatant.AttackState value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(11);
            writer.Write(value.AttackerId);
            writer.Write(value.AttackId);
            formatterResolver.GetFormatterWithVerify<global::Banchou.Combatant.AttackPhase>().Serialize(ref writer, value.Phase, options);
            writer.Write(value.TargetId);
            writer.Write(value.WhenHit);
            writer.Write(value.Damage);
            formatterResolver.GetFormatterWithVerify<global::Banchou.Combatant.HitStyle>().Serialize(ref writer, value.HitStyle, options);
            writer.Write(value.PauseTime);
            formatterResolver.GetFormatterWithVerify<global::UnityEngine.Vector3>().Serialize(ref writer, value.Contact, options);
            formatterResolver.GetFormatterWithVerify<global::UnityEngine.Vector3>().Serialize(ref writer, value.Recoil, options);
            writer.Write(value.LastUpdated);
        }

        public global::Banchou.Combatant.AttackState Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __AttackerId__ = default(int);
            var __AttackId__ = default(int);
            var __Phase__ = default(global::Banchou.Combatant.AttackPhase);
            var __TargetId__ = default(int);
            var __WhenHit__ = default(float);
            var __Damage__ = default(int);
            var __HitStyle__ = default(global::Banchou.Combatant.HitStyle);
            var __PauseTime__ = default(float);
            var __Contact__ = default(global::UnityEngine.Vector3);
            var __Recoil__ = default(global::UnityEngine.Vector3);
            var __LastUpdated__ = default(float);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __AttackerId__ = reader.ReadInt32();
                        break;
                    case 1:
                        __AttackId__ = reader.ReadInt32();
                        break;
                    case 2:
                        __Phase__ = formatterResolver.GetFormatterWithVerify<global::Banchou.Combatant.AttackPhase>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __TargetId__ = reader.ReadInt32();
                        break;
                    case 4:
                        __WhenHit__ = reader.ReadSingle();
                        break;
                    case 5:
                        __Damage__ = reader.ReadInt32();
                        break;
                    case 6:
                        __HitStyle__ = formatterResolver.GetFormatterWithVerify<global::Banchou.Combatant.HitStyle>().Deserialize(ref reader, options);
                        break;
                    case 7:
                        __PauseTime__ = reader.ReadSingle();
                        break;
                    case 8:
                        __Contact__ = formatterResolver.GetFormatterWithVerify<global::UnityEngine.Vector3>().Deserialize(ref reader, options);
                        break;
                    case 9:
                        __Recoil__ = formatterResolver.GetFormatterWithVerify<global::UnityEngine.Vector3>().Deserialize(ref reader, options);
                        break;
                    case 10:
                        __LastUpdated__ = reader.ReadSingle();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Banchou.Combatant.AttackState(__AttackerId__, __AttackId__, __Phase__, __TargetId__, __WhenHit__, __Damage__, __HitStyle__, __PauseTime__, __Contact__, __Recoil__, __LastUpdated__);
            reader.Depth--;
            return ____result;
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name
