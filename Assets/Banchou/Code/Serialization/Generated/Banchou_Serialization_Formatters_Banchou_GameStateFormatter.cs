// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace Banchou.Serialization.Formatters.Banchou
{
    using global::System.Buffers;
    using global::MessagePack;

    public sealed class GameStateFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Banchou.GameState>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Banchou.GameState value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(5);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Version, options);
            formatterResolver.GetFormatterWithVerify<global::Banchou.Board.BoardState>().Serialize(ref writer, value.Board, options);
            formatterResolver.GetFormatterWithVerify<global::Banchou.Player.PlayersState>().Serialize(ref writer, value.Players, options);
            writer.Write(value.LocalTime);
            writer.Write(value.DeltaTime);
        }

        public global::Banchou.GameState Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Version__ = default(string);
            var __Board__ = default(global::Banchou.Board.BoardState);
            var __Players__ = default(global::Banchou.Player.PlayersState);
            var __LocalTime__ = default(float);
            var __DeltaTime__ = default(float);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __Version__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __Board__ = formatterResolver.GetFormatterWithVerify<global::Banchou.Board.BoardState>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __Players__ = formatterResolver.GetFormatterWithVerify<global::Banchou.Player.PlayersState>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __LocalTime__ = reader.ReadSingle();
                        break;
                    case 4:
                        __DeltaTime__ = reader.ReadSingle();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Banchou.GameState(__Version__, __Board__, __Players__, __LocalTime__, __DeltaTime__);
            reader.Depth--;
            return ____result;
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name
