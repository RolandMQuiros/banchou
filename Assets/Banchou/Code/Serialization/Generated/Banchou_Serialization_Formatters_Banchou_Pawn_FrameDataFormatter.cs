// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace Banchou.Serialization.Formatters.Banchou.Pawn
{
    using System;
    using System.Buffers;
    using MessagePack;

    public sealed class FrameDataFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Banchou.Pawn.FrameData>
    {

        public void Serialize(ref MessagePackWriter writer, global::Banchou.Pawn.FrameData value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(8);
            formatterResolver.GetFormatterWithVerify<global::UnityEngine.Vector3>().Serialize(ref writer, value.Position, options);
            formatterResolver.GetFormatterWithVerify<global::UnityEngine.Vector3>().Serialize(ref writer, value.Forward, options);
            formatterResolver.GetFormatterWithVerify<int[]>().Serialize(ref writer, value.StateHashes, options);
            formatterResolver.GetFormatterWithVerify<float[]>().Serialize(ref writer, value.NormalizedTimes, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<int, float>>().Serialize(ref writer, value.Floats, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<int, int>>().Serialize(ref writer, value.Ints, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<int, bool>>().Serialize(ref writer, value.Bools, options);
            writer.Write(value.When);
        }

        public global::Banchou.Pawn.FrameData Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Position__ = default(global::UnityEngine.Vector3);
            var __Forward__ = default(global::UnityEngine.Vector3);
            var __StateHashes__ = default(int[]);
            var __NormalizedTimes__ = default(float[]);
            var __Floats__ = default(global::System.Collections.Generic.Dictionary<int, float>);
            var __Ints__ = default(global::System.Collections.Generic.Dictionary<int, int>);
            var __Bools__ = default(global::System.Collections.Generic.Dictionary<int, bool>);
            var __When__ = default(float);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __Position__ = formatterResolver.GetFormatterWithVerify<global::UnityEngine.Vector3>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __Forward__ = formatterResolver.GetFormatterWithVerify<global::UnityEngine.Vector3>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __StateHashes__ = formatterResolver.GetFormatterWithVerify<int[]>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __NormalizedTimes__ = formatterResolver.GetFormatterWithVerify<float[]>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __Floats__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<int, float>>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        __Ints__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<int, int>>().Deserialize(ref reader, options);
                        break;
                    case 6:
                        __Bools__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<int, bool>>().Deserialize(ref reader, options);
                        break;
                    case 7:
                        __When__ = reader.ReadSingle();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Banchou.Pawn.FrameData(__Position__, __Forward__, __StateHashes__, __NormalizedTimes__, __Floats__, __Ints__, __Bools__, __When__);
            reader.Depth--;
            return ____result;
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name
